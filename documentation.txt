MERN From Scratch 2023 | eCommerce Platform


Section 1: Introduction

1. Welcome To The Course

2. Course Project Intro

3. Course Code Repo

4. Getting Started


Section 2: Starting The Front End

5. React Setup & Git Initialize
-kreiramo folder frontend
-instaliramo Vite React projekt

6. Header & Footer Components
-u terminalu instalirano React Bootstrap i React ikonice paket
-u main.jsx komponentu importujemo React Bootstrap css fajl
-u folderu src kreiramo folder components
-u folderu components kreiramo komponentu Header.jsx
-u komponentu Header.jsx importujemo React Bootstrap komponente i React ikonice
-u komponentu App.jsx importujemo komponentu Header.jsx i React Bootstrap komponente
-u folderu components kreiramo komponentu Footer.jsx
-u komponentu Footer.jsx importujemo React Bootstrap komponente
-u komponentu App.jsx importujemo komponentu Footer.jsx

7. Custom Bootstrap Theme
-u folderu assets kreiramo folder styles
-u folderu styles kreiramo bootstrap.custom.css i index.css fajlove
-u folder assets dodajemo sliku
-u komponentu Header.jsx importujemo sliku logo

8. List Products
-u folderu public kreiramo folder images sa slikama
-u folderu src kreiramo product.js fajl
-kreiramo folder screens
-u folderu screens kreiramo komponentu HomeScreen.jsx
-u komponentu HomeScreen.jsx importujemo React Bootstrap komponente
-importujemo products fajl
-u return izjavi varijabli products dodajemo metodu map()
-u komponentu App.jsx importujemo komponentu HomeScreen.jsx
-u folderu components kreiramo komponentu Product.jsx
-u komponentu HomeScreen.jsx importujemo komponentu Product.jsx

9. Implement React Router
-u terminalu instaliramo paket React Router Dom
-u main.jsx komponentu importujemo funkcije iz React Router Dom paketa
-kreiramo funkciju createBrowserRouter()
-u funkciju createBrowserRouter() proslijedujemo funkciju createRoutesFromElements()
-u funkciji createRoutesFromElements kreiramo komponentu Route
-vrijednost funkcije createBrowserRouter() pohranjujemo u varijablu const router
-u metodu render() dodajemo komponentu RouterProvider
-komponenti RouterProvider dodajemo prop router
-u prop router proslijedujemo varijablu router
-u komponentu App.jsx importujemo komponentu Outlet iz React Router Dom paketa
-u terminalu instaliramo paket React Router Bootstrap
-u komponentu Header importujemo komponentu LinkContainer

10. Rating Component
-kreiramo komponentu Rating.jsx
-u komponentu Rating.jsx importujemo React ikonice
-funkciji Rating dodajemo parametre destruktuirane prop
-u komponentu Product.jsx importujemo komponentu Rating.jsx

11. Product Details Page
-u folderu screens kreiramo komponentu ProductScreen.jsx
-u komponentu ProductScreen.jsx importujemo React Hook useParams
-importujemo fajl products
-destruktuiramo id iz funkcije React Hook useParams()
-kreiramo varijablu const product


Section 3: Serving & Fetching Data

12. Full Stack Workflow & Explanation

13. Express Server & Initial Product Routes
-kreiramo .gitignore fajl 
-kreiramo folderu backend
-u terminalu udemo u folder backend sa komandom cd backend
-u terminalu ukucamo komandu npm init da inicijaliziramo package.json fajl
-kreiramo server.js fajl
-u server.js fajlu kreiramo express setup

14. Nodemon & Concurrently
-u terminalu instaliramo Nodemon paket
-backend pokrenemo sa komandom npm run server

15. Environment Variables
-u terminalu instaliramo paket Dotenv
-u server.js fajl importujemo dotenv paket

16. Fetch Products
-u folderu frontend instaliramo paket Axios
-u komponentu HomeScreen.jsx importujemo useState i useEffect React Hooks
-kreiramo state varijablu products i funkciju setProducts
-kreiramo funkciju useEffect()
-u funkciji useEffect() kreiramo asinhronu funkciju fetchProducts
-u komponentu ProductScreen.jsx importujemo useState i useEffect React Hooks
-kreiramo funkciju useEffect()
-kreiramo state varijablu product i funkciju setProduct
-u funkciji useEffect() kreiramo asinhronu funkciju fetchProduct


Section 4: Starting MongoDB & Mongoose

17. MongoDB Atlas Setup
-kreiramo Cloud bazu podataka MongoDB Atlas

18. MongoDB Compass Setup
-preuzmemo Desktop verziju aplikacije

19. Connect With Mongoose
-u folderu backend, u terminalu instaliramo paket Mongoose
-kreiramo folder config
-u folderu config kreiramo db.js fajl
-u db.js fajl importujemo objekt mongoose
-kreiramo asinhronu funkciju connectDB()
-u asinhronoj funkciji connectDB() kreiramo blokove koda try - catch
-u server.js fajl importujemo funkciju connectDB
-pozivamo funkciju connectDB()

20.  Modeling Our Data
-u folderu backend, kreiramo folder models
-u folderu models kreiramo productModel.js fajl
-u productModel.js fajl importujemo objekt mongoose
-kreiramo funkciju mongoose.Schema({ ... })
-vrijednost mongoose.Schema({ ... }) pohranjujemo u varijablu const productSchema
-kreiramo i ekskportujemo varijablu const Product kao default
-kreiramo varijablu reviewSchema
-kreiramo userModel.js fajl
-kreiramo varijablu const userSchema 
-kreiramo varijablu const User
-kreiramo orderModel.js fajl
-kreiramo varijablu orderSchema
-kreiramo i ekskportujemo varijablu const Order kao default

21. Prepare Sample Data
-u folderu data kreiramo users.js fajl
-u terminalu instaliramo bcrypt paket
-u users.js fajlu kreiramo varijablu const users 

22. Seeding Sample Data
-u folderu backend kreiramo seeder.js fajl
-u seeder.js fajlu kreiramo asinhronu funkciju importData()
-kreiramo asinhronu funkciju destroyData()
-u package.json fajlu dodajemo komande za seeder.js fajl

23. Getting Started With Postman
-kreiramo i testiramo rute u Postman-u

24. Get Products from Database
-u folderu backend kreiramo folder routes
-u folderu routes kreiramo productRoutes.js fajl
-u server.js fajl importujemo varijablu productRoutes
-kreiramo metodu app.use('/api/products', productRoutes)
-u folderu backend kreiramo folder middleware
-u folderu middleware kreiramo asyncHandler.js fajl
-u asyncHandler.js fajlu kreiramo funkciju asyncHandler()
-u productRoutes.js fajl importujemo funkciju asyncHandler
-importujemo objekt Product
-u metodi router.get('/') kreiramo varijablu const products
-kreiramo metodu res.json(products)
-u metodi router.get('/:id') kreiramo varijablu const product
-dodajemo uslov if (product)
-kreiramo metodu res.status(404).json({ ... })

25. Custom Error Middleware
-u folderu middleware kreiramo errorMiddleware.js fajl
-u errorMiddleware.js fajlu kreiramo i ekskportujemo funkcije notFound() i errorHandler()
-u server.js fajl importujemo kreirane funkcije 
-kreiramo dvije metode app.use(notFound) i app.use(errorHandler)

26. Product Controller
-kreiramo folder controllers
-u folderu controllers kreiramo productController.js fajl
-u productController.js fajlu kreiramo funkcije getProducts() i getProductById()
-u productRoutes.js fajlu kreiramo dvije metode router.route()


Section 5: Redux Toolkit Setup & State Management

27. Redux & State Overview

28. Redux Store & API Slice
-u folderu frontend, u terminalu instaliramo React Redux i Redux Toolkit pakete
-u folderu src kreiramo store.js fajl
-u store.js fajl importujemo funkciju configureStore
-kreiramo funkciju configureStore({ ... })
-vrijednost funkcije configureStore() pohranjujemo u varijablu const store
-u main.jsx komponentu importujemo komponentu Provider
-importujemo varijablu store
-komponenti Provider dodajemo prop store
-u prop store proslijedujemo varijablu store
-kreiramo constants.js fajl
-u constants.js fajlu kreiramo i ekskportujemo varijable
-u folderu src kreiramo folder slices
-u folderu slices kreiramo apiSlice.js fajl
-u apiSlice.js fajl importujemo funkcije createApi i fetchBaseQuery
-importujemo varijablu BASE_URL
-kreiramo varijablu const baseQuery
-kreiramo funkciju createApi({ ... })
-vrijednost funkcije createApi() pohranjujemo u varijablu const apiSlice
-u store.js fajl importujemo varijablu apiSlice

29. Products API Slice & Get Products Endpoint
-u folderu slices kreiramo productsApiSlice.js fajl
-u productsApiSlice.js fajl importujemo funkciju apiSlice i varijablu PRODUCTS_URL
-kreiramo funkciju apiSlice.injectEndpoints({ ... })
-vrijednost funkcije apiSlice.index() pohranjujemo u varijablu const productsApiSlice
-ekskportujemo funkciju useGetProductsQuery
-u komponentu HomeScreen.jsx importujemo funkciju useGetProductsQuery 

30. Get Product Details Endpoint Challenge
-u productApiSlice.js fajlu kreiramo endpoint funkciju getProductDetails i ekskportujemo funkciju useGetProductDetailsQuery
-u komponentu HomeScreen.jsx importujemo funkciju useGetProductDetailsQuery

31. Loader & Message Components
-u folderu components kreiramo komponentu Loader.jsx 
-u komponente HomeScreen.jsx i ProductScreen.jsx importujemo komponentu Loader.jsx
-u folderu components kreiramo komponentu Message.jsx
-u komponentu Message.jsx importujemo komponentu Alert iz React Bootstrap paketa
-u komponente HomeScreen.jsx i ProductScreen.jsx importujemo komponentu Message.jsx
